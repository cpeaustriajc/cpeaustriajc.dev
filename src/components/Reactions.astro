<script>
  type Reactions =
    | "like"
    | "love"
    | "dislike"
    | "haha"
    | "sad"
    | "angry"
    | "surprised";

  class ReactionsList extends HTMLElement {
    private likeCount = 0;
    private loveCount = 0;
    private dislikeCount = 0;
    private hahaCount = 0;
    private sadCount = 0;
    private angryCount = 0;
    private surprisedCount = 0;

    private usedReactions: Record<Reactions, boolean> = {
      like: false,
      love: false,
      dislike: false,
      haha: false,
      sad: false,
      angry: false,
      surprised: false,
    };

    constructor() {
      super();
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      if (name === "reaction") {
        this.handleReaction(newValue as Reactions);
      }
    }

    connectedCallback() {
      this.loadReactionFromStorage();
      const inputs: NodeListOf<Element> = document.querySelectorAll(
        'reactions-list input[type="radio"]',
      );
      inputs.forEach((input: Element) => {
        input.addEventListener("change", () => {
          this.handleReaction((input as HTMLInputElement).value as Reactions);
        });
      });
    }

    disconnectedCallback() {
      const inputs: NodeListOf<Element> = document.querySelectorAll(
        'reactions-list input[type="radio"]',
      );
      inputs.forEach((input: Element) => {
        (input as HTMLInputElement).disabled = false;
      });
    }

    private loadReactionFromStorage() {
      const savedReaction = localStorage.getItem(
        "reaction",
      ) as Reactions | null;
      if (savedReaction && this.usedReactions.hasOwnProperty(savedReaction)) {
        this.handleReaction(savedReaction);
        const input = this.querySelector(
          `input[value="${savedReaction}"]`,
        ) as HTMLInputElement;
        if (input) {
          input.checked = true;
        }
      }
    }
    handleReaction(reaction: Reactions) {
      if (
        !this.usedReactions[reaction] ||
        localStorage.getItem("reaction") === reaction
      ) {
        switch (reaction) {
          case "like":
            this.likeCount++;
            break;
          case "love":
            this.loveCount++;
            break;
          case "dislike":
            this.dislikeCount++;
            break;
          case "haha":
            this.hahaCount++;
            break;
          case "sad":
            this.sadCount++;
            break;
          case "angry":
            this.angryCount++;
            break;
          case "surprised":
            this.surprisedCount++;
            break;
        }

        this.usedReactions[reaction] = true;

        const inputs: NodeListOf<Element> = document.querySelectorAll(
          'reactions-list input[type="radio"]',
        );
        inputs.forEach((input: Element) => {
          (input as HTMLInputElement).disabled = true;
        });
        localStorage.setItem("reaction", reaction);

        const selectedLabel = document.querySelector(
          `label[for="${reaction}"]`,
        );
        if (selectedLabel) {
          selectedLabel.classList.add("selected");
        }
      }
    }
  }
  customElements.define("reactions-list", ReactionsList);
</script>

<reactions-list>
  <label for="love">
    <input type="radio" name="reaction" id="love" value="love" />
    <img src="https://emojicdn.elk.sh/😍" width="24" height="24" alt="Love" />
  </label>
  <label for="like">
    <input type="radio" name="reaction" id="like" value="like" />
    <img src="https://emojicdn.elk.sh/👍" width="24" height="24" alt="Like" />
  </label>
  <label for="dislike">
    <input type="radio" name="reaction" id="dislike" value="dislike" />
    <img
      src="https://emojicdn.elk.sh/👎"
      width="24"
      height="24"
      alt="Dislike"
    />
  </label>
  <label for="haha">
    <input
      type="radio"
      name="reaction"
      id="haha"
      value="haha"
      onchange="this.handleReaction('haha')"
    />
    <img src="https://emojicdn.elk.sh/😂" width="24" height="24" alt="Haha" />
  </label>
  <label for="sad">
    <input type="radio" name="reaction" id="sad" value="sad" />
    <img src="https://emojicdn.elk.sh/😢" width="24" height="24" alt="Sad" />
  </label>
  <label for="angry">
    <input type="radio" name="reaction" id="angry" value="angry" />
    <img src="https://emojicdn.elk.sh/😡" width="24" height="24" alt="Angry" />
  </label>
  <label for="surprised">
    <input type="radio" name="reaction" id="surprised" value="surprised" />
    <img
      src="https://emojicdn.elk.sh/😲"
      width="24"
      height="24"
      alt="Surprised"
    />
  </label>
</reactions-list>

<style>
  reactions-list {
    position: relative;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    gap: 1rem;
    border-radius: 9999px;
    padding: 1rem;
    margin-inline: 1.5rem;
    background-color: hsl(var(--gray-3-hsl) / 5%);
    backdrop-filter: blur(10px);
    box-shadow: 0 0 10px hsl(var(--gray-5-hsl) / 0.5);
  }

  label {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
  }

  input[type="radio"] {
    display: none;
  }

  label img {
    transition: transform 0.5s var(--ease-spring-1);
  }

  label:hover img {
    transform: scale(1.25);
  }

  input[type="radio"]:checked + img {
    transform: scale(1.5);
    filter: drop-shadow(0 0 2px rgba(0, 0, 0, 0.5));
    animation:
      var(--animation-bounce) forwards,
      var(--animation-scale-up) forwards;
    animation-timing-function: var(--ease-spring-1);
    animation-duration: 1.25s;
  }

  @media (min-width: 768px) {
    reactions-list {
      position: absolute;
      flex-direction: column;
      top: 25px;
      left: -90px;
      gap: 2rem;
    }
  }
</style>
